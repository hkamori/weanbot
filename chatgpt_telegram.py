import telebot
from openai import OpenAI
import time

client = OpenAI(api_key='key')
bot = telebot.TeleBot('token')

@bot.message_handler(commands=['start'])
def start(message):
    mess = f'–ü—Ä–∏–≤–µ—Ç *{message.from_user.first_name}*! üëãü§ñ\n'
    mess2 = f'*–ß—Ç–æ —è —É–º–µ—é?* ‚ú®\n\n‚ãÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏.\n‚ãÖ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏.\n‚ãÖ –ü–æ–º–æ–≥–∞—Ç—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞.\n‚ãÖ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.\n‚ãÖ –ü–æ–º–æ–≥–∞—Ç—å —Å —É—Ä–æ–∫–∞–º–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ–º.\n‚ãÖ –í—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n‚ãÖ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ *"/help"* ü§ñüåê'
    bot.send_message(message.chat.id, mess, parse_mode= "Markdown")
    bot.send_message(message.chat.id, mess2, parse_mode= "Markdown")

@bot.message_handler(commands=['help'])
def help(message):
    mess_help = f'*–ö–æ–º–∞–Ω–¥—ã* üéÜ\n\n‚ãÖ */ai* | –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ò–ò ü§ñ\n‚ãÖ */emoji* | –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —ç–º–æ–¥–∑–∏ ‚ú®\n‚ãÖ */translate* | –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üéÄ'
    bot.send_message(message.chat.id, mess_help, parse_mode= "Markdown")

@bot.message_handler(commands=['emoji'])
def emoji(message):
    result = str(message)
    response = client.chat.completions.create(
    model="gpt-3.5-turbo-0301",
    messages=[
        {
        "role": "system",
        "content": "You will be provided with a message, and your task is to respond using emojis only, dont use text, only emojis."
        },
        {
        "role": "user",
        "content": result
        }
    ],
    temperature=0.8,
    max_tokens=64,
    top_p=1
    )
    print(f'{result} {response}')
    bot.send_message(message.chat.id, response.choices[0].message.content, parse_mode= "html")


@bot.message_handler(commands=['ai'])
def ai(message):
    result2 = str(message)
    response = client.chat.completions.create(
    model="gpt-3.5-turbo-0301",
    messages=[
        {
        "role": "system",
        "content": "You will be provided with a message, and your task is to respond."
        },
        {
        "role": "user",
        "content": result2
        }
    ],
    temperature=0
    )
    print(f'{result2} {response}')
    bot.send_message(message.chat.id, response.choices[0].message.content, parse_mode="html")

@bot.message_handler(commands=['translate'])
def translate(message):
    result = str(message)
    response = client.chat.completions.create(
    model="gpt-3.5-turbo-0301",
    messages=[
        {
        "role": "system",
        "content": "You will be provided with a, and your task is to translate it into language that user request, but send only a translated sentence without languages user request."
        },
        {
        "role": "user",
        "content": result
        }
    ],
    temperature=0.7
    )
    print(f'{result} {response}')
    bot.send_message(message.chat.id, response.choices[0].message.content, parse_mode= "html")

@bot.message_handler(commands=['joke'])
def joke(message):
    result = str(message)
    response = client.chat.completions.create(
    model="gpt-3.5-turbo-0301",
    messages=[
        {
        "role": "system",
        "content": "You will be provided with a topic, and your task is to make a joke with this topic in ukrainian."
        },
        {
        "role": "user",
        "content": result
        }
    ],
    temperature=0.7
    )
    print(f'{result} {response}')
    bot.send_message(message.chat.id, response.choices[0].message.content, parse_mode= "html")


bot.polling(none_stop=True)
